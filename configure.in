AC_INIT(README)
AC_CANONICAL_SYSTEM
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(gnome-desktop-sharp, 2.23.90)
AM_MAINTAINER_MODE

case "$host" in
	*-*-mingw*|*-*-cygwin*)
		platform_win32=yes
		AC_DEFINE(PLATFORM_WIN32,1,[Platform is Win32])
		CC="gcc -mno-cygwin -g"
		HOST_CC="gcc"
		;;
	*)
		platform_win32=no
		;;
esac

AM_CONDITIONAL(PLATFORM_WIN32, test x$platform_win32 = xyes)

AC_CHECK_TOOL(CC, gcc, gcc)
AC_PROG_CC
AM_PROG_CC_STDC
AC_PROG_INSTALL

dnl may require a specific autoconf version
dnl AC_PROG_CC_FOR_BUILD
dnl CC_FOR_BUILD not automatically detected
CC_FOR_BUILD=$CC
BUILD_EXEEXT=
if test "x$cross_compiling" = "xyes"; then
	CC_FOR_BUILD=cc
	BUILD_EXEEXT=""
fi
AC_SUBST(CC_FOR_BUILD)
AC_SUBST(HOST_CC)
AC_SUBST(BUILD_EXEEXT)

# Set STDC_HEADERS
AC_HEADER_STDC
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL

if test x$platform_win32 = xyes; then
   # Get rid of 'cyg' prefixes in library names
   sed -e "s/\/cyg\//\/\//" libtool > libtool.new; mv libtool.new libtool; chmod 755 libtool
fi

# not 64 bit clean in cross-compile
AC_CHECK_SIZEOF(void *, 4)

CFLAGS='-g -Wall -Wunused -Wmissing-prototypes -Wmissing-declarations -Wstrict-prototypes  -Wmissing-prototypes -Wnested-externs  -Wshadow -Wpointer-arith -Wno-cast-qual -Wcast-align -Wwrite-strings'

if test "x$enable_maintainer_mode" = "xyes"; then
DEBUG_FLAGS='-debug'
else
DEBUG_FLAGS=
AC_ARG_ENABLE(debug, [  --enable-debug          Build debugger (.mdb) files for dlls],
	DEBUG_FLAGS='-debug'
)
fi

CSDEFINES=
CSFLAGS="$DEBUG_FLAGS $CSDEFINES"
AC_SUBST(CSFLAGS)

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test "x$PKG_CONFIG" = "xno"; then
	AC_MSG_ERROR([You need to install pkg-config])
fi

dnl for use on the build system
BUILD_GTK_CFLAGS=`$PKG_CONFIG --cflags gtk+-2.0`
BUILD_GTK_LIBS=`$PKG_CONFIG --libs gtk+-2.0`
AC_SUBST(BUILD_GTK_CFLAGS)
AC_SUBST(BUILD_GTK_LIBS)

MONO_REQUIRED_VERSION=1.0
PKG_CHECK_MODULES(MONO_DEPENDENCY, mono >= $MONO_REQUIRED_VERSION, has_mono=true, has_mono=false)

AC_PATH_PROG(GACUTIL, gacutil, no)
if test "x$GACUTIL" = "xno" ; then
	AC_MSG_ERROR([No gacutil tool found. You need to install either the mono or .Net SDK.])
fi

AC_PATH_PROG(AL, al, no)
if test "x$AL" = "xno" ; then
	AC_MSG_ERROR([No al tool found. You need to install either the mono or .Net SDK.])
fi

if test "x$has_mono" = "xtrue"; then
GACUTIL_FLAGS='/package $(PACKAGE_VERSION) /gacdir $(DESTDIR)$(prefix)/lib'
GENERATED_SOURCES=generated/*.cs
AC_PATH_PROG(RUNTIME, mono, no)

# If mono is found, it's in the path.  Require it to be in the path at runtime as well
if test "x$RUNTIME" != "no" ; then
	RUNTIME=mono
fi

AC_PATH_PROG(CSC, mcs, no)
if test `uname -s` = "Darwin"; then
	LIB_PREFIX=
	LIB_SUFFIX=.dylib
else
	LIB_PREFIX=.so
	LIB_SUFFIX=
fi
else
AC_PATH_PROG(CSC, csc.exe, no)
GACUTIL_FLAGS=
GENERATED_SOURCES=generated\\\\*.cs
enable_dotnet=yes

if test x$CSC = "xno"; then
	AC_MSG_ERROR([You need to install either mono or .Net])
else
RUNTIME=
LIB_PREFIX=
LIB_SUFFIX=.dylib
fi
fi

CS="C#"
if test "x$CSC" = "xno" ; then
	AC_MSG_ERROR([No $CS compiler found])
fi

AC_SUBST(RUNTIME)
AC_SUBST(CSC)
AC_SUBST(GACUTIL)
AC_SUBST(GACUTIL_FLAGS)
AC_SUBST(LIB_PREFIX)
AC_SUBST(LIB_SUFFIX)
AC_SUBST(GENERATED_SOURCES)

PKG_CHECK_MODULES(MONO_CAIRO, mono-cairo >= $MONO_REQUIRED_VERSION, has_mono_cairo=true, has_mono_cairo=false)
AC_SUBST(MONO_CAIRO_LIBS)

if test "x$has_mono_cairo" = "xfalse" -a "x$API_VERSION" = "x2.8.0.0"; then
	AC_MSG_ERROR([You need to install Mono.Cairo.dll and its pkgconfig file or set PKG_CONFIG_PATH to find it.])
fi

GTK_REQUIRED_VERSION=2.12.0

PKG_CHECK_MODULES(GTKSHARP, gtk-sharp-2.0 >= $GTK_REQUIRED_VERSION)
AC_SUBST(GTKSHARP_CFLAGS)
AC_SUBST(GTKSHARP_LIBS)

PKG_CHECK_MODULES(GAPI, gapi-2.0 >= $GTK_REQUIRED_VERSION)
AC_PATH_PROG(GAPI_PARSER, gapi2-parser, no)
AC_SUBST(GAPI_PARSER)
AC_PATH_PROG(GAPI_CODEGEN, gapi2-codegen, no)
AC_SUBST(GAPI_CODEGEN)
AC_PATH_PROG(GAPI_FIXUP, gapi2-fixup, no)
AC_SUBST(GAPI_FIXUP)

## Versions of dependencies
GNOME_REQUIRED_VERSION=2.23.0
GNOME_SHARP_REQUIRED_VERSION=2.23.0

PKG_CHECK_MODULES(GNOMESHARP, gnome-sharp-2.0 >= $GNOME_SHARP_REQUIRED_VERSION, enable_gnome=yes, enable_gnome=no)
AC_SUBST(GNOMESHARP_CFLAGS)
AC_SUBST(GNOMESHARP_LIBS)

AM_CONDITIONAL(ENABLE_GNOME, test "x$enable_gnome" = "xyes")
AC_SUBST(CFLAGS)

NAUTILUSBURN_REQUIRED_VERSION=2.22.1

PKG_CHECK_MODULES(NAUTILUSBURN, libnautilus-burn >= $NAUTILUSBURN_REQUIRED_VERSION, enable_nautilusburn=yes, enable_nautilusburn=no)
AC_SUBST(NAUTILUSBURN_CFLAGS)
AC_SUBST(NAUTILUSBURN_LIBS)

RSVG_REQUIRED_VERSION=2.22.2

PKG_CHECK_MODULES(RSVG, librsvg-2.0 >= $RSVG_REQUIRED_VERSION, enable_rsvg=yes, enable_rsvg=no)
AC_SUBST(RSVG_CFLAGS)
AC_SUBST(RSVG_LIBS)

PKG_CHECK_MODULES(GNOME_PANEL, libpanelapplet-2.0 >= $GNOME_REQUIRED_VERSION, enable_gnome_panel=yes, enable_gnome_panel=no)
AC_SUBST(GNOME_PANEL_CFLAGS)
AC_SUBST(GNOME_PANEL_LIBS)

GNOME_PRINT_REQUIRED_VERSION=2.18.0

PKG_CHECK_MODULES(GNOME_PRINT, libgnomeprint-2.2 >= $GNOME_PRINT_REQUIRED_VERSION libgnomeprintui-2.2 >= $GNOME_PRINT_REQUIRED_VERSION, enable_gnome_print=yes, enable_gnome_print=no)
AC_SUBST(GNOME_PRINT_CFLAGS)
AC_SUBST(GNOME_PRINT_LIBS)

GTKHTML_REQUIRED_VERSION=3.23.5

PKG_CHECK_MODULES(GTKHTML, libgtkhtml-3.14 >= $GTKHTML_REQUIRED_VERSION, enable_gtkhtml=yes, enable_gtkhtml=no)
AC_SUBST(GTKHTML_CFLAGS)
AC_SUBST(GTKHTML_LIBS)

GTKSOURCEVIEW_REQUIRED_VERSION=2.2.2

PKG_CHECK_MODULES(GTKSOURCEVIEW, gtksourceview-2.0 >= $GTKSOURCEVIEW_REQUIRED_VERSION, enable_gtksourceview=yes, enable_gtksourceview=no)
AC_SUBST(GTKSOURCEVIEW_CFLAGS)
AC_SUBST(GTKSOURCEVIEW_LIBS)

VTE_REQUIRED_VERSION=0.16.14

PKG_CHECK_MODULES(VTE, vte >= $VTE_REQUIRED_VERSION, enable_vte=yes, enable_vte=no)
AC_SUBST(VTE_CFLAGS)
AC_SUBST(VTE_LIBS)

PKG_CHECK_MODULES(WNCK, libwnck-1.0 >= $GNOME_REQUIRED_VERSION, enable_wnck=yes, enable_wnck=no)
AC_SUBST(WNCK_CFLAGS)
AC_SUBST(WNCK_LIBS)

AM_CONDITIONAL(ENABLE_GTKHTML, test "x$enable_gtkhtml" = "xyes")
AM_CONDITIONAL(ENABLE_GNOME_PANEL, test "x$enable_gnome_panel" = "xyes")
AM_CONDITIONAL(ENABLE_GNOME_PRINT, test "x$enable_gnome_print" = "xyes")
AM_CONDITIONAL(ENABLE_GTKSOURCEVIEW, test "x$enable_gtksourceview" = "xyes")
AM_CONDITIONAL(ENABLE_NAUTILUSBURN, test "x$enable_nautilusburn" = "xyes")
AM_CONDITIONAL(ENABLE_RSVG, test "x$enable_rsvg" = "xyes")
AM_CONDITIONAL(ENABLE_VTE, test "x$enable_vte" = "xyes")
AM_CONDITIONAL(ENABLE_WNCK, test "x$enable_wnck" = "xyes")

AC_SUBST(CFLAGS)

AC_OUTPUT([
Makefile
sources/Makefile
gnomedesktop/Makefile
gnomedesktop/gnomedesktop-sharp.dll.config
gnomedesktop/gnome-desktop-sharp-2.0.pc
gnomepanel/Makefile
gnomepanel/glue/Makefile
gnomepanel/gnome-panel-sharp.dll.config
gnomepanel/gnome-panel-sharp-2.24.pc
gnomeprint/Makefile
gnomeprint/gnome-print-sharp.dll.config
gnomeprint/gnome-print-sharp-2.18.pc
nautilusburn/Makefile
nautilusburn/glue/Makefile
nautilusburn/nautilusburn-sharp.dll.config
nautilusburn/nautilusburn-sharp.pc
rsvg/Makefile
rsvg/rsvg2-sharp.dll.config
rsvg/rsvg2-sharp-2.0.pc
gtkhtml/Makefile
gtkhtml/glue/Makefile
gtkhtml/gtkhtml-sharp.dll.config
gtkhtml/gtkhtml-sharp-3.14.pc
gtksourceview/Makefile
gtksourceview/glue/Makefile
gtksourceview/gtksourceview2-sharp.dll.config
gtksourceview/gtksourceview2-sharp.pc
vte/Makefile
vte/vte-sharp.dll.config
vte/vte-sharp-0.16.pc
vte/glue/Makefile
wnck/Makefile
wnck/glue/Makefile
wnck/wnck-sharp.dll.config
wnck/wnck-sharp-1.0.pc
])

#gnomedesktop/glue/Makefile
#sample/Makefile

echo "---"
echo "Configuration summary"
echo ""
echo "   * Installation prefix = $prefix"
echo "   * $CS compiler: $CSC $CSFLAGS"
echo ""
echo "   Optional assemblies included in the build:"
echo ""
echo "      * gnome-panel-sharp.dll: $enable_gnome_panel"
echo "      * gnome-print-sharp.dll: $enable_gnome_print"
echo "      * gtkhtml-sharp.dll: $enable_gtkhtml"
echo "      * gtksourceview2-sharp.dll: $enable_gtksourceview"
echo "      * nautilusburn-sharp.dll: $enable_nautilusburn"
echo "      * rsvg-sharp.dll: $enable_rsvg"
echo "      * vte-sharp.dll: $enable_vte"
echo "      * wnck-sharp.dll: $enable_wnck"
echo ""
echo "      NOTE: if any of the above say 'no' you may install the"
echo "            corresponding development packages for them, rerun"
echo "            autogen.sh to include them in the build."
echo ""
echo "---"

